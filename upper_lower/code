global _start    ; tell linker entry point

section .text
_start:
    ; Convert Lowercase to Uppercase
    mov ecx, len        ; length of string
    mov esi, s1         ; source string (lowercase)
    mov edi, s2         ; destination string (uppercase)

loop_here:
    lodsb               ; load byte at [esi] into al, increments esi
    cmp al, 'a'         ; check if it is a lowercase letter
    jl no_convert       ; if not, skip conversion
    cmp al, 'z'         ; check if it is a lowercase letter
    jg no_convert       ; if not, skip conversion

    and al, 0xdf        ; clear the 5th bit to convert lowercase to uppercase

no_convert:
    stosb               ; store al into [edi], increments edi
    loop loop_here      ; repeat for each character

    ; Write the result to stdout
    mov edx, 20         ; message length
    mov ecx, s2         ; message to write
    mov ebx, 1          ; file descriptor (stdout)
    mov eax, 4          ; system call number (sys_write)
    int 0x80            ; call kernel

    ; Exit the program
    mov eax, 1          ; system call number (sys_exit)
    int 0x80            ; call kernel

section .data
s1 db 'hello, WORLD', 0 ; source string
len equ $-s1            ; length of the string

section .bss
s2 resb 20              ; destination string buffer
